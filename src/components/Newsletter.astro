---
const interests = [
	'AI Orchestration',
	'Claude Code',
	'Web Development',
	'DevOps & Infrastructure',
	'Python Automation',
	'JavaScript/TypeScript'
];
---

<section class="py-16 bg-gray-900 text-white">
	<div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
		<div class="text-center mb-8">
			<h2 class="text-3xl lg:text-4xl font-bold mb-4">
				Stay Updated
			</h2>
			<p class="text-lg text-gray-300">
				Get notified when I publish new content about AI orchestration, development workflows,
				and the latest experiments. No spam, just valuable insights.
			</p>
		</div>

		<div class="bg-gray-800 rounded-lg p-8">
			<form id="newsletter-form" class="space-y-6">
				<div>
					<label for="signup-email" class="block text-sm font-medium text-gray-300 mb-2">
						Email Address
					</label>
					<input
						type="email"
						id="signup-email"
						name="email"
						class="w-full px-4 py-3 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:ring-2 focus:ring-blue-500 focus:border-transparent"
						placeholder="your@email.com"
						required
					/>
				</div>

				<div>
					<label class="block text-sm font-medium text-gray-300 mb-3">
						What interests you most? (Optional)
					</label>
					<div class="grid grid-cols-2 md:grid-cols-3 gap-3">
						{interests.map((interest) => (
							<button
								type="button"
								data-interest={interest}
								class="interest-btn px-3 py-2 rounded-lg text-sm font-medium transition-colors bg-gray-700 text-gray-300 hover:bg-gray-600"
							>
								{interest}
							</button>
						))}
					</div>
				</div>

				<div class="flex flex-col space-y-4">
					<div class="flex items-center justify-between">
						<button
							type="submit"
							id="newsletter-submit"
							class="bg-blue-600 hover:bg-blue-700 disabled:bg-blue-400 text-white px-8 py-3 rounded-lg font-medium transition-colors flex items-center space-x-2"
						>
							<span id="newsletter-submit-text">Subscribe</span>
							<svg class="w-4 h-4" id="newsletter-arrow" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
							</svg>
							<div class="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin hidden" id="newsletter-spinner"></div>
						</button>

						<div id="newsletter-success" class="text-green-400 font-medium flex items-center space-x-2 hidden">
							<svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
								<path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
							</svg>
							<span id="newsletter-success-text">Successfully subscribed!</span>
						</div>
					</div>

					<div id="newsletter-error" class="text-red-400 font-medium text-sm hidden"></div>

					<p class="text-xs text-gray-400">
						No spam, ever. Unsubscribe at any time. I respect your privacy and will only send valuable content updates.
					</p>
				</div>
			</form>
		</div>
	</div>
</section>

<script>
	const form = document.getElementById('newsletter-form');
	const submitBtn = document.getElementById('newsletter-submit');
	const submitText = document.getElementById('newsletter-submit-text');
	const arrow = document.getElementById('newsletter-arrow');
	const spinner = document.getElementById('newsletter-spinner');
	const successMsg = document.getElementById('newsletter-success');
	const successText = document.getElementById('newsletter-success-text');
	const errorMsg = document.getElementById('newsletter-error');
	const interestBtns = document.querySelectorAll('.interest-btn');
	const selectedInterests = new Set<string>();

	// Handle interest selection
	interestBtns.forEach(btn => {
		btn.addEventListener('click', () => {
			const interest = btn.getAttribute('data-interest');
			if (interest) {
				if (selectedInterests.has(interest)) {
					selectedInterests.delete(interest);
					btn.classList.remove('bg-blue-600', 'text-white');
					btn.classList.add('bg-gray-700', 'text-gray-300');
				} else {
					selectedInterests.add(interest);
					btn.classList.remove('bg-gray-700', 'text-gray-300');
					btn.classList.add('bg-blue-600', 'text-white');
				}
			}
		});
	});

	// Handle form submission
	form?.addEventListener('submit', async (e) => {
		e.preventDefault();

		// Show loading state
		submitBtn?.setAttribute('disabled', 'true');
		submitText!.textContent = 'Subscribing...';
		arrow?.classList.add('hidden');
		spinner?.classList.remove('hidden');
		successMsg?.classList.add('hidden');
		errorMsg?.classList.add('hidden');

		try {
			// Prepare form data
			const formData = new FormData(e.target as HTMLFormElement);

			// Add interests as JSON array
			formData.append('interests', JSON.stringify(Array.from(selectedInterests)));

			// Submit to API endpoint
			const response = await fetch('/api/newsletter-signup', {
				method: 'POST',
				body: formData,
			});

			const result = await response.json();

			if (!response.ok) {
				throw new Error(result.error || 'Failed to subscribe');
			}

			// Show success state
			submitBtn?.removeAttribute('disabled');
			submitText!.textContent = 'Subscribe';
			arrow?.classList.remove('hidden');
			spinner?.classList.add('hidden');
			successMsg?.classList.remove('hidden');

			// Update success message if it's a duplicate
			if (result.message) {
				successText!.textContent = result.message;
			} else {
				successText!.textContent = 'Successfully subscribed!';
			}

			// Reset form
			(e.target as HTMLFormElement).reset();

			// Reset interest buttons
			selectedInterests.clear();
			interestBtns.forEach(btn => {
				btn.classList.remove('bg-blue-600', 'text-white');
				btn.classList.add('bg-gray-700', 'text-gray-300');
			});

			// Hide success message after 3 seconds
			setTimeout(() => {
				successMsg?.classList.add('hidden');
			}, 3000);
		} catch (error) {
			// Show error state
			submitBtn?.removeAttribute('disabled');
			submitText!.textContent = 'Subscribe';
			arrow?.classList.remove('hidden');
			spinner?.classList.add('hidden');

			if (errorMsg) {
				errorMsg.textContent = error instanceof Error ? error.message : 'Failed to subscribe. Please try again.';
				errorMsg.classList.remove('hidden');
			}

			// Hide error message after 5 seconds
			setTimeout(() => {
				errorMsg?.classList.add('hidden');
			}, 5000);
		}
	});
</script>
