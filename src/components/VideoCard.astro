---
export interface Props {
	videoId: string;
	title: string;
	thumbnail: string;
	duration?: string;
	viewCount?: number;
	publishedAt: string;
}

const { videoId, title, thumbnail, duration, viewCount, publishedAt } = Astro.props;

// Format view count
const formatViews = (count?: number) => {
	if (!count) return "0 views";
	if (count < 1000) return `${count} views`;
	if (count < 1000000) return `${(count / 1000).toFixed(1)}K views`;
	return `${(count / 1000000).toFixed(1)}M views`;
};

// Format time ago
const getTimeAgo = (date: string) => {
	const now = new Date();
	const published = new Date(date);
	const diffMs = now.getTime() - published.getTime();
	const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));

	if (diffDays === 0) return "Today";
	if (diffDays === 1) return "Yesterday";
	if (diffDays < 7) return `${diffDays} days ago`;
	if (diffDays < 30) return `${Math.floor(diffDays / 7)} weeks ago`;
	if (diffDays < 365) return `${Math.floor(diffDays / 30)} months ago`;
	return `${Math.floor(diffDays / 365)} years ago`;
};

const views = formatViews(viewCount);
const timeAgo = getTimeAgo(publishedAt);
---

<button
	type="button"
	onclick={`openVideoModal('${videoId}', '${title.replace(/'/g, "\\'")}')`}
	class="bg-white border border-gray-200 rounded-lg overflow-hidden hover:shadow-lg transition-all duration-300 group cursor-pointer block w-full text-left"
>
	<!-- Video Thumbnail -->
	<div class="relative aspect-video bg-gray-100">
		<img
			src={thumbnail}
			alt={title}
			class="w-full h-full object-cover"
			loading="lazy"
		/>
		<div class="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-20 flex items-center justify-center transition-all duration-300 opacity-0 group-hover:opacity-100">
			<svg class="w-12 h-12 text-white" fill="currentColor" viewBox="0 0 24 24">
				<path d="M8 5v14l11-7z"/>
			</svg>
		</div>
		{duration && (
			<div class="absolute bottom-2 right-2 bg-black bg-opacity-80 text-white text-xs px-2 py-1 rounded flex items-center">
				<svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
					<circle cx="12" cy="12" r="10"></circle>
					<polyline points="12,6 12,12 16,14"></polyline>
				</svg>
				{duration}
			</div>
		)}
	</div>

	<!-- Video Info -->
	<div class="p-4">
		<h3 class="font-semibold text-gray-900 mb-2 line-clamp-2 group-hover:text-blue-600 transition-colors text-sm h-10">
			{title}
		</h3>
		<div class="flex items-center text-xs text-gray-500 space-x-2">
			<div class="flex items-center">
				<svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
				</svg>
				{views}
			</div>
			<span>â€¢</span>
			<span>{timeAgo}</span>
		</div>
	</div>
</button>

<style>
	.line-clamp-2 {
		display: -webkit-box;
		-webkit-line-clamp: 2;
		-webkit-box-orient: vertical;
		overflow: hidden;
	}
</style>
