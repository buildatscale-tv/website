---
import WaveTransition from './WaveTransition.astro';

const requestTypes = [
  'Video Request',
  'Tool/Service Review',
  'Collaboration Idea',
  'Sponsored Video RFP'
];
---

<WaveTransition
  topColor="fill-gray-50 dark:fill-slate-700"
  bottomColor="fill-blue-50 dark:fill-slate-800"
/>

<section class="py-8 pb-12 bg-blue-50 dark:bg-slate-800">
  <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="text-center mb-12">
      <h2 class="text-3xl lg:text-4xl font-bold text-gray-900 dark:text-gray-100 mb-4">
        Have an Idea or Request?
      </h2>
      <p class="text-lg text-gray-600 dark:text-gray-300">
        Suggest a topic, share a problem you're facing, or request a video.
        I'm always looking for real-world challenges to explore.
      </p>
    </div>

    <div class="bg-white dark:bg-slate-700/50 backdrop-blur-sm rounded-lg shadow-lg dark:shadow-slate-700/50 p-8 border border-transparent dark:border-slate-600">
      <form id="request-form" class="space-y-6">
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <label for="name" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Name
            </label>
            <input
              type="text"
              id="name"
              name="name"
              class="w-full px-4 py-2 border border-gray-300 dark:border-slate-600 bg-white dark:bg-slate-700/50 text-gray-900 dark:text-gray-100 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              required
            />
          </div>
          <div>
            <label for="request-email" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Email
            </label>
            <input
              type="email"
              id="request-email"
              name="email"
              class="w-full px-4 py-2 border border-gray-300 dark:border-slate-600 bg-white dark:bg-slate-700/50 text-gray-900 dark:text-gray-100 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              required
            />
          </div>
        </div>

        <div>
          <label for="type" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
            Request Type
          </label>
          <select
            id="type"
            name="type"
            class="w-full px-4 py-2 border border-gray-300 dark:border-slate-600 bg-white dark:bg-slate-700/50 text-gray-900 dark:text-gray-100 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent [&>option]:bg-white [&>option]:dark:bg-slate-800 [&>option]:text-gray-900 [&>option]:dark:text-gray-100"
          >
            {requestTypes.map((type) => (
              <option value={type}>{type}</option>
            ))}
          </select>
        </div>

        <div>
          <label for="message" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
            Details
          </label>
          <textarea
            id="message"
            name="message"
            rows="4"
            class="w-full px-4 py-2 border border-gray-300 dark:border-slate-600 bg-white dark:bg-slate-700/50 text-gray-900 dark:text-gray-100 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent placeholder-gray-400 dark:placeholder-gray-500"
            placeholder="Describe your idea, problem, or request in detail..."
            required
          ></textarea>
        </div>

        <div class="flex flex-col space-y-4">
          <div class="flex items-center justify-between">
            <button
              type="submit"
              id="request-submit"
              class="bg-blue-600 hover:bg-blue-700 disabled:bg-blue-400 text-white px-8 py-3 rounded-lg font-medium transition-colors flex items-center space-x-2"
            >
              <span id="request-submit-text">Submit Request</span>
              <div class="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin hidden" id="request-spinner"></div>
            </button>

            <div id="request-success" class="text-green-600 dark:text-green-400 font-medium flex items-center space-x-2 hidden">
              <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
              </svg>
              <span>Request submitted successfully!</span>
            </div>
          </div>

          <div id="request-error" class="text-red-600 dark:text-red-400 font-medium text-sm hidden"></div>
        </div>
      </form>
    </div>
  </div>
</section>

<script>
  const form = document.getElementById('request-form');
  const submitBtn = document.getElementById('request-submit');
  const submitText = document.getElementById('request-submit-text');
  const spinner = document.getElementById('request-spinner');
  const successMsg = document.getElementById('request-success');
  const errorMsg = document.getElementById('request-error');

  form?.addEventListener('submit', async (e) => {
    e.preventDefault();

    // Show loading state
    submitBtn?.setAttribute('disabled', 'true');
    submitText!.textContent = 'Sending...';
    spinner?.classList.remove('hidden');
    successMsg?.classList.add('hidden');
    errorMsg?.classList.add('hidden');

    try {
      // Submit form data to API endpoint
      const formData = new FormData(e.target as HTMLFormElement);
      const response = await fetch('/api/submit-request', {
        method: 'POST',
        body: formData,
      });

      const result = await response.json();

      if (!response.ok) {
        throw new Error(result.error || 'Failed to submit request');
      }

      // Show success state
      submitBtn?.removeAttribute('disabled');
      submitText!.textContent = 'Submit Request';
      spinner?.classList.add('hidden');
      successMsg?.classList.remove('hidden');

      // Reset form
      (e.target as HTMLFormElement).reset();

      // Hide success message after 3 seconds
      setTimeout(() => {
        successMsg?.classList.add('hidden');
      }, 3000);
    } catch (error) {
      // Show error state
      submitBtn?.removeAttribute('disabled');
      submitText!.textContent = 'Submit Request';
      spinner?.classList.add('hidden');

      if (errorMsg) {
        errorMsg.textContent = error instanceof Error ? error.message : 'Failed to submit request. Please try again.';
        errorMsg.classList.remove('hidden');
      }

      // Hide error message after 5 seconds
      setTimeout(() => {
        errorMsg?.classList.add('hidden');
      }, 5000);
    }
  });
</script>
